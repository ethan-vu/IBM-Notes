{"cells": [{"metadata": {}, "cell_type": "markdown", "source": " <a href=\"https://www.bigdatauniversity.com\"><img src = \"https://ibm.box.com/shared/static/ugcqz6ohbvff804xp84y4kqnvvk3bq1g.png\" width = 300, align = \"center\"></a>\n\n<h1 align=center><font size = 5>Data Analysis with Python</font></h1>"}, {"metadata": {}, "cell_type": "markdown", "source": "# House Sales in King County, USA"}, {"metadata": {}, "cell_type": "markdown", "source": "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015."}, {"metadata": {}, "cell_type": "markdown", "source": "<b>id</b> : A notation for a house\n\n<b> date</b>: Date house was sold\n\n\n<b>price</b>: Price is prediction target\n\n\n<b>bedrooms</b>: Number of bedrooms\n\n\n<b>bathrooms</b>: Number of bathrooms\n\n<b>sqft_living</b>: Square footage of the home\n\n<b>sqft_lot</b>: Square footage of the lot\n\n\n<b>floors</b> :Total floors (levels) in house\n\n\n<b>waterfront</b> :House which has a view to a waterfront\n\n\n<b>view</b>: Has been viewed\n\n\n<b>condition</b> :How good the condition is overall\n\n<b>grade</b>: overall grade given to the housing unit, based on King County grading system\n\n\n<b>sqft_above</b> : Square footage of house apart from basement\n\n\n<b>sqft_basement</b>: Square footage of the basement\n\n<b>yr_built</b> : Built Year\n\n\n<b>yr_renovated</b> : Year when house was renovated\n\n<b>zipcode</b>: Zip code\n\n\n<b>lat</b>: Latitude coordinate\n\n<b>long</b>: Longitude coordinate\n\n<b>sqft_living15</b> : Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area\n\n\n<b>sqft_lot15</b> : LotSize area in 2015(implies-- some renovations)"}, {"metadata": {}, "cell_type": "markdown", "source": "You will require the following libraries: "}, {"metadata": {}, "cell_type": "code", "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline", "execution_count": 1, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "# Module 1: Importing Data Sets "}, {"metadata": {}, "cell_type": "markdown", "source": " Load the csv:  "}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "file_name='https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/kc_house_data_NaN.csv'\ndf=pd.read_csv(file_name)", "execution_count": 2, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "\nWe use the method <code>head</code> to display the first 5 columns of the dataframe."}, {"metadata": {}, "cell_type": "code", "source": "df.head()", "execution_count": 5, "outputs": [{"output_type": "execute_result", "execution_count": 5, "data": {"text/plain": "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n\n   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n0         1180      5650     1.0           0  ...      7        1180   \n1         2570      7242     2.0           0  ...      7        2170   \n2          770     10000     1.0           0  ...      6         770   \n3         1960      5000     1.0           0  ...      7        1050   \n4         1680      8080     1.0           0  ...      8        1680   \n\n   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n0              0      1955             0    98178  47.5112 -122.257   \n1            400      1951          1991    98125  47.7210 -122.319   \n2              0      1933             0    98028  47.7379 -122.233   \n3            910      1965             0    98136  47.5208 -122.393   \n4              0      1987             0    98074  47.6168 -122.045   \n\n   sqft_living15  sqft_lot15  \n0           1340        5650  \n1           1690        7639  \n2           2720        8062  \n3           1360        5000  \n4           1800        7503  \n\n[5 rows x 22 columns]", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3.0</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3.0</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2.0</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4.0</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3.0</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows \u00d7 22 columns</p>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 1 \nDisplay the data types of each column using the attribute dtype, then take a screenshot and submit it, include your code in the image. "}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "df.dtypes", "execution_count": 6, "outputs": [{"output_type": "execute_result", "execution_count": 6, "data": {"text/plain": "Unnamed: 0         int64\nid                 int64\ndate              object\nprice            float64\nbedrooms         float64\nbathrooms        float64\nsqft_living        int64\nsqft_lot           int64\nfloors           float64\nwaterfront         int64\nview               int64\ncondition          int64\ngrade              int64\nsqft_above         int64\nsqft_basement      int64\nyr_built           int64\nyr_renovated       int64\nzipcode            int64\nlat              float64\nlong             float64\nsqft_living15      int64\nsqft_lot15         int64\ndtype: object"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "We use the method describe to obtain a statistical summary of the dataframe."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "df.describe().round()", "execution_count": 13, "outputs": [{"output_type": "execute_result", "execution_count": 13, "data": {"text/plain": "           price  bedrooms  bathrooms  sqft_living   sqft_lot   floors  \\\ncount    21613.0   21600.0    21603.0      21613.0    21613.0  21613.0   \nmean    540088.0       3.0        2.0       2080.0    15107.0      1.0   \nstd     367127.0       1.0        1.0        918.0    41421.0      1.0   \nmin      75000.0       1.0        0.0        290.0      520.0      1.0   \n25%     321950.0       3.0        2.0       1427.0     5040.0      1.0   \n50%     450000.0       3.0        2.0       1910.0     7618.0      2.0   \n75%     645000.0       4.0        2.0       2550.0    10688.0      2.0   \nmax    7700000.0      33.0        8.0      13540.0  1651359.0      4.0   \n\n       waterfront     view  condition    grade  sqft_above  sqft_basement  \\\ncount     21613.0  21613.0    21613.0  21613.0     21613.0        21613.0   \nmean          0.0      0.0        3.0      8.0      1788.0          292.0   \nstd           0.0      1.0        1.0      1.0       828.0          443.0   \nmin           0.0      0.0        1.0      1.0       290.0            0.0   \n25%           0.0      0.0        3.0      7.0      1190.0            0.0   \n50%           0.0      0.0        3.0      7.0      1560.0            0.0   \n75%           0.0      0.0        4.0      8.0      2210.0          560.0   \nmax           1.0      4.0        5.0     13.0      9410.0         4820.0   \n\n       yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\ncount   21613.0       21613.0  21613.0  21613.0  21613.0        21613.0   \nmean     1971.0          84.0  98078.0     48.0   -122.0         1987.0   \nstd        29.0         402.0     54.0      0.0      0.0          685.0   \nmin      1900.0           0.0  98001.0     47.0   -123.0          399.0   \n25%      1951.0           0.0  98033.0     47.0   -122.0         1490.0   \n50%      1975.0           0.0  98065.0     48.0   -122.0         1840.0   \n75%      1997.0           0.0  98118.0     48.0   -122.0         2360.0   \nmax      2015.0        2015.0  98199.0     48.0   -121.0         6210.0   \n\n       sqft_lot15  \ncount     21613.0  \nmean      12768.0  \nstd       27304.0  \nmin         651.0  \n25%        5100.0  \n50%        7620.0  \n75%       10083.0  \nmax      871200.0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.0</td>\n      <td>21600.0</td>\n      <td>21603.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>540088.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2080.0</td>\n      <td>15107.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>8.0</td>\n      <td>1788.0</td>\n      <td>292.0</td>\n      <td>1971.0</td>\n      <td>84.0</td>\n      <td>98078.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>1987.0</td>\n      <td>12768.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>367127.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>918.0</td>\n      <td>41421.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>828.0</td>\n      <td>443.0</td>\n      <td>29.0</td>\n      <td>402.0</td>\n      <td>54.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>685.0</td>\n      <td>27304.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>75000.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>290.0</td>\n      <td>520.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>290.0</td>\n      <td>0.0</td>\n      <td>1900.0</td>\n      <td>0.0</td>\n      <td>98001.0</td>\n      <td>47.0</td>\n      <td>-123.0</td>\n      <td>399.0</td>\n      <td>651.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>321950.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1427.0</td>\n      <td>5040.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>7.0</td>\n      <td>1190.0</td>\n      <td>0.0</td>\n      <td>1951.0</td>\n      <td>0.0</td>\n      <td>98033.0</td>\n      <td>47.0</td>\n      <td>-122.0</td>\n      <td>1490.0</td>\n      <td>5100.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>450000.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1910.0</td>\n      <td>7618.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>7.0</td>\n      <td>1560.0</td>\n      <td>0.0</td>\n      <td>1975.0</td>\n      <td>0.0</td>\n      <td>98065.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>1840.0</td>\n      <td>7620.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>645000.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2550.0</td>\n      <td>10688.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>2210.0</td>\n      <td>560.0</td>\n      <td>1997.0</td>\n      <td>0.0</td>\n      <td>98118.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>2360.0</td>\n      <td>10083.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7700000.0</td>\n      <td>33.0</td>\n      <td>8.0</td>\n      <td>13540.0</td>\n      <td>1651359.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>13.0</td>\n      <td>9410.0</td>\n      <td>4820.0</td>\n      <td>2015.0</td>\n      <td>2015.0</td>\n      <td>98199.0</td>\n      <td>48.0</td>\n      <td>-121.0</td>\n      <td>6210.0</td>\n      <td>871200.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "# Module 2: Data Cleaning"}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 2 \nDrop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>"}, {"metadata": {}, "cell_type": "code", "source": "df.drop(['id', 'Unnamed: 0'], axis=1, inplace = True)", "execution_count": null, "outputs": []}, {"metadata": {}, "cell_type": "code", "source": "df.describe().round()", "execution_count": 19, "outputs": [{"output_type": "execute_result", "execution_count": 19, "data": {"text/plain": "           price  bedrooms  bathrooms  sqft_living   sqft_lot   floors  \\\ncount    21613.0   21600.0    21603.0      21613.0    21613.0  21613.0   \nmean    540088.0       3.0        2.0       2080.0    15107.0      1.0   \nstd     367127.0       1.0        1.0        918.0    41421.0      1.0   \nmin      75000.0       1.0        0.0        290.0      520.0      1.0   \n25%     321950.0       3.0        2.0       1427.0     5040.0      1.0   \n50%     450000.0       3.0        2.0       1910.0     7618.0      2.0   \n75%     645000.0       4.0        2.0       2550.0    10688.0      2.0   \nmax    7700000.0      33.0        8.0      13540.0  1651359.0      4.0   \n\n       waterfront     view  condition    grade  sqft_above  sqft_basement  \\\ncount     21613.0  21613.0    21613.0  21613.0     21613.0        21613.0   \nmean          0.0      0.0        3.0      8.0      1788.0          292.0   \nstd           0.0      1.0        1.0      1.0       828.0          443.0   \nmin           0.0      0.0        1.0      1.0       290.0            0.0   \n25%           0.0      0.0        3.0      7.0      1190.0            0.0   \n50%           0.0      0.0        3.0      7.0      1560.0            0.0   \n75%           0.0      0.0        4.0      8.0      2210.0          560.0   \nmax           1.0      4.0        5.0     13.0      9410.0         4820.0   \n\n       yr_built  yr_renovated  zipcode      lat     long  sqft_living15  \\\ncount   21613.0       21613.0  21613.0  21613.0  21613.0        21613.0   \nmean     1971.0          84.0  98078.0     48.0   -122.0         1987.0   \nstd        29.0         402.0     54.0      0.0      0.0          685.0   \nmin      1900.0           0.0  98001.0     47.0   -123.0          399.0   \n25%      1951.0           0.0  98033.0     47.0   -122.0         1490.0   \n50%      1975.0           0.0  98065.0     48.0   -122.0         1840.0   \n75%      1997.0           0.0  98118.0     48.0   -122.0         2360.0   \nmax      2015.0        2015.0  98199.0     48.0   -121.0         6210.0   \n\n       sqft_lot15  \ncount     21613.0  \nmean      12768.0  \nstd       27304.0  \nmin         651.0  \n25%        5100.0  \n50%        7620.0  \n75%       10083.0  \nmax      871200.0  ", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.0</td>\n      <td>21600.0</td>\n      <td>21603.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n      <td>21613.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>540088.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2080.0</td>\n      <td>15107.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>8.0</td>\n      <td>1788.0</td>\n      <td>292.0</td>\n      <td>1971.0</td>\n      <td>84.0</td>\n      <td>98078.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>1987.0</td>\n      <td>12768.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>367127.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>918.0</td>\n      <td>41421.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>828.0</td>\n      <td>443.0</td>\n      <td>29.0</td>\n      <td>402.0</td>\n      <td>54.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>685.0</td>\n      <td>27304.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>75000.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>290.0</td>\n      <td>520.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>290.0</td>\n      <td>0.0</td>\n      <td>1900.0</td>\n      <td>0.0</td>\n      <td>98001.0</td>\n      <td>47.0</td>\n      <td>-123.0</td>\n      <td>399.0</td>\n      <td>651.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>321950.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1427.0</td>\n      <td>5040.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>7.0</td>\n      <td>1190.0</td>\n      <td>0.0</td>\n      <td>1951.0</td>\n      <td>0.0</td>\n      <td>98033.0</td>\n      <td>47.0</td>\n      <td>-122.0</td>\n      <td>1490.0</td>\n      <td>5100.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>450000.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1910.0</td>\n      <td>7618.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>7.0</td>\n      <td>1560.0</td>\n      <td>0.0</td>\n      <td>1975.0</td>\n      <td>0.0</td>\n      <td>98065.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>1840.0</td>\n      <td>7620.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>645000.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2550.0</td>\n      <td>10688.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>8.0</td>\n      <td>2210.0</td>\n      <td>560.0</td>\n      <td>1997.0</td>\n      <td>0.0</td>\n      <td>98118.0</td>\n      <td>48.0</td>\n      <td>-122.0</td>\n      <td>2360.0</td>\n      <td>10083.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7700000.0</td>\n      <td>33.0</td>\n      <td>8.0</td>\n      <td>13540.0</td>\n      <td>1651359.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>13.0</td>\n      <td>9410.0</td>\n      <td>4820.0</td>\n      <td>2015.0</td>\n      <td>2015.0</td>\n      <td>98199.0</td>\n      <td>48.0</td>\n      <td>-121.0</td>\n      <td>6210.0</td>\n      <td>871200.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>"}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n", "execution_count": 20, "outputs": [{"output_type": "stream", "text": "number of NaN values for the column bedrooms : 13\nnumber of NaN values for the column bathrooms : 10\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "\nWe can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>"}, {"metadata": {}, "cell_type": "code", "source": "mean1 = df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean1, inplace=True)", "execution_count": 21, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "\nWe also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>"}, {"metadata": {}, "cell_type": "code", "source": "mean2 = df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean2, inplace=True)", "execution_count": 22, "outputs": []}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())", "execution_count": 23, "outputs": [{"output_type": "stream", "text": "number of NaN values for the column bedrooms : 0\nnumber of NaN values for the column bathrooms : 0\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "# Module 3: Exploratory Data Analysis"}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 3\nUse the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n"}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "df['floors'].value_counts().to_frame()", "execution_count": 32, "outputs": [{"output_type": "execute_result", "execution_count": 32, "data": {"text/plain": "     floors\n1.0   10680\n2.0    8241\n1.5    1910\n3.0     613\n2.5     161\n3.5       8", "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>floors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1.0</th>\n      <td>10680</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>8241</td>\n    </tr>\n    <tr>\n      <th>1.5</th>\n      <td>1910</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>2.5</th>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>3.5</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 4\nUse the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "sns.boxplot(x=\"waterfront\", y=\"price\", data=df)", "execution_count": 34, "outputs": [{"output_type": "execute_result", "execution_count": 34, "data": {"text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f1c34dd2ef0>"}, "metadata": {}}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "\n"}, "metadata": {"needs_background": "light"}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 5\nUse the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "sns.regplot(x='sqft_above', y='price', data=df)\nprint(df[['sqft_above','price']].corr())", "execution_count": 39, "outputs": [{"output_type": "stream", "text": "            sqft_above     price\nsqft_above    1.000000  0.605567\nprice         0.605567  1.000000\n", "name": "stdout"}, {"output_type": "display_data", "data": {"text/plain": "<Figure size 432x288 with 1 Axes>", "image/png": "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\n"}, "metadata": {"needs_background": "light"}}]}, {"metadata": {}, "cell_type": "markdown", "source": "\nWe can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "df.corr()['price'].sort_values()", "execution_count": 40, "outputs": [{"output_type": "execute_result", "execution_count": 40, "data": {"text/plain": "zipcode         -0.053203\nlong             0.021626\ncondition        0.036362\nyr_built         0.054012\nsqft_lot15       0.082447\nsqft_lot         0.089661\nyr_renovated     0.126434\nfloors           0.256794\nwaterfront       0.266369\nlat              0.307003\nbedrooms         0.308797\nsqft_basement    0.323816\nview             0.397293\nbathrooms        0.525738\nsqft_living15    0.585379\nsqft_above       0.605567\ngrade            0.667434\nsqft_living      0.702035\nprice            1.000000\nName: price, dtype: float64"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "# Module 4: Model Development"}, {"metadata": {}, "cell_type": "markdown", "source": "\nWe can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)", "execution_count": 41, "outputs": [{"output_type": "execute_result", "execution_count": 41, "data": {"text/plain": "0.00046769430149007363"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question  6\nFit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "X = df[['sqft_living']]\nY = df[['price']]\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X,Y)", "execution_count": 104, "outputs": [{"output_type": "execute_result", "execution_count": 104, "data": {"text/plain": "0.49285321790379316"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 7\nFit a linear regression model to predict the <code>'price'</code> using the list of features:"}, {"metadata": {}, "cell_type": "code", "source": "Z =df[[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]]     ", "execution_count": 57, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "Then calculate the R^2. Take a screenshot of your code."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "Y = df[['price']]\nlm.fit(Z,Y)\nlm.score(Z,Y)", "execution_count": 59, "outputs": [{"output_type": "execute_result", "execution_count": 59, "data": {"text/plain": "0.657679183672129"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "### This will help with Question 8\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'</code>\n\n<code>'polynomial'</code>\n\n<code>'model'</code>\n\nThe second element in the tuple  contains the model constructor \n\n<code>StandardScaler()</code>\n\n<code>PolynomialFeatures(include_bias=False)</code>\n\n<code>LinearRegression()</code>\n"}, {"metadata": {}, "cell_type": "code", "source": "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]", "execution_count": 60, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 8\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "", "execution_count": null, "outputs": []}, {"metadata": {}, "cell_type": "markdown", "source": "# Module 5: Model Evaluation and Refinement"}, {"metadata": {}, "cell_type": "markdown", "source": "Import the necessary modules:"}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")", "execution_count": 61, "outputs": [{"output_type": "stream", "text": "done\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "We will split the data into training and testing sets:"}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])", "execution_count": 64, "outputs": [{"output_type": "stream", "text": "number of test samples: 3242\nnumber of training samples: 18371\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 9\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data. \n"}, {"metadata": {}, "cell_type": "code", "source": "from sklearn.linear_model import Ridge", "execution_count": 81, "outputs": []}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "RigeModel=Ridge(alpha=0.1)\nRigeModel.fit(x_train, y_train)\nRigeModel.score(x_train, y_train)\nRigeModel.coef_ #11 coefficient corresponding to the number of features (11)\nprint(RigeModel.score(x_train, y_train))", "execution_count": 106, "outputs": [{"output_type": "stream", "text": "0.6594378534950245\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "markdown", "source": "### Question 10\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2."}, {"metadata": {"jupyter": {"outputs_hidden": false}}, "cell_type": "code", "source": "# Establishing the Training and Testing sets\nfeatures =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n# Second Polynomial transformation\npoly_2 = PolynomialFeatures(degree=2)\nx_train_poly = poly_2.fit_transform(x_train[features])\nx_test_poly = poly_2.fit_transform(x_test[features])\n\n# Construct the Ridge Regression model\nRigeModel = Ridge(alpha=0.1)\nModel = RigeModel.fit(x_train_poly, y_train)\nRsquare = RigeModel.score(x_train_poly, y_train)\nprint(Rsquare)", "execution_count": 109, "outputs": [{"output_type": "stream", "text": "0.741816743868634\n", "name": "stdout"}]}, {"metadata": {}, "cell_type": "code", "source": "RigeModel.score(x_test_poly, y_test)", "execution_count": 87, "outputs": [{"output_type": "execute_result", "execution_count": 87, "data": {"text/plain": "0.7002744279699229"}, "metadata": {}}]}, {"metadata": {}, "cell_type": "markdown", "source": "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n        <p><img width=\"600\" src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/save_notebook.png\" alt=\"share notebook\"  style=\"display: block; margin-left: auto; margin-right: auto;\"/></p>\n        <p></p>\n        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n        <p style=\"text-align: center;\"><img width=\"600\"  src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\" /></p>\n        <p>&nbsp;</p>"}, {"metadata": {}, "cell_type": "markdown", "source": "<h2>About the Authors:</h2> \n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD."}, {"metadata": {}, "cell_type": "markdown", "source": "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/\">Michelle Carey</a>, <a href=\"www.linkedin.com/in/jiahui-mavis-zhou-a4537814a\">Mavis Zhou</a> "}, {"metadata": {}, "cell_type": "code", "source": "", "execution_count": null, "outputs": []}], "metadata": {"kernelspec": {"name": "python3", "display_name": "Python 3.6", "language": "python"}, "language_info": {"name": "python", "version": "3.6.9", "mimetype": "text/x-python", "codemirror_mode": {"name": "ipython", "version": 3}, "pygments_lexer": "ipython3", "nbconvert_exporter": "python", "file_extension": ".py"}, "widgets": {"state": {}, "version": "1.1.2"}}, "nbformat": 4, "nbformat_minor": 4}
